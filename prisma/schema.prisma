generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  username String? @unique
  password String?

  accounts Account[]
  sessions Session[]

  //  Workspaces the user has created
  createdWorkspaces Workspace[]

  //  Workspaces the user is a member of
  workspaces   Workspace[] @relation("workspaceMember", fields: [workspaceIDs], references: [id])
  workspaceIDs String[]    @db.ObjectId
  //  Boards the user has created or joined
  //boards       Board[]     @relation(fields: [boardsIDs], references: [id])
  //boardsIDs    String[]    @db.ObjectId
  //  Tasks the user was assigned to
  Task         Task[]
  activity     Activity[]
}

model Workspace {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdBy   User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //  Privacy status
  isPublic Boolean
  //  Workspace members
  users    User[]     @relation("workspaceMember", fields: [usersIDs], references: [id])
  usersIDs String[]   @db.ObjectId
  //  Boards it contains
  boards   Board[]
  //  Workspace's activity
  activity Activity[]
}

model Board {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  //  Unsplash background image url
  backgroundImageFull String?
  backgroundImageSmall String?
  //  Workspace it belongs to
  workspace   Workspace  @relation(fields: [workspaceID], references: [id], onDelete: Cascade)
  workspaceID String     @db.ObjectId
  //  Board members
  //users       User[]    @relation(fields: [usersIDs], references: [id])
  //usersIDs    String[]  @db.ObjectId
  //  Lists it contains
  lists       List[]
  //  Board's activity
  activity    Activity[]
}

model List {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  updatedAt DateTime @updatedAt

  //  Board it belongs to
  board   Board  @relation(fields: [boardID], references: [id], onDelete: Cascade)
  boardID String @db.ObjectId
  //  Tasks it contains
  tasks   Task[]

  indexNumber Int
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //  List it belongs to
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String   @db.ObjectId
  //  User who is asigned to
  user        User?    @relation(fields: [userID], references: [id])
  userID      String?  @db.ObjectId

  indexNumber Int
}

model Activity {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  type        ActivityType
  board       Board?       @relation(fields: [boardId], references: [id])
  boardId     String?      @db.ObjectId
  workspace   Workspace?   @relation(fields: [workspaceId], references: [id])
  workspaceId String?      @db.ObjectId
  name        String
  description String
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userID], references: [id])
  userID      String       @db.ObjectId
}

enum ActivityType {
  CreatedWorkspace
  CreatedBoard
  JoinedWorkspace
  JoinedBoard
  UpdatedWorkspace
  UpdatedBoard
  DeletedWorkspace
  DeletedBoard
}
